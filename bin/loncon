#!/usr/bin/perl -w

use strict;
use File::Copy;
use File::Glob qw( :glob );
use File::Slurp qw( :edit );
use Template;
use YAML::Any qw( LoadFile );

my $laptop = 0;

my $datadir = "/Users/kake/Documents/Geo stuff/Loncon";
my $filename = $ARGV[0] || "$datadir/food-guide.yaml";
my ( $webdir, $base_url );
if ( $laptop ) {
  $webdir = "/Users/kake/Sites/loncon";
  $base_url = "http://127.0.0.1/~kake/loncon/";
} else {
  $webdir = "/Users/kake/tmp/loncon/";
  $base_url = "http://the.earth.li/~kake/tmp/loncon/";
}

my @venues = LoadFile( $filename );
@venues = sort { $a->{name} cmp $b->{name} } @venues;

print "Found " . ( scalar @venues ) . " venue" . ( scalar @venues == 1 ? "" : "s" ) . ".\n";


my ( $min_lat, $max_lat, $centre_lat, $min_long, $max_long, $centre_long );
$min_lat = $max_lat = $venues[0]{lat};
$min_long = $max_long = $venues[0]{long};

# Marker colours
my %colours = (
  restaurant => "red",
  pub => "blue",
  takeaway => "green",
  "grocery shop" => "yellow",
);

foreach my $venue ( @venues ) {
  # Check whether we need to expand our bounding box.
  $min_lat = $venue->{lat} if ( $venue->{lat} < $min_lat );
  $max_lat = $venue->{lat} if ( $venue->{lat} > $max_lat );
  $min_long = $venue->{long} if ( $venue->{long} < $min_long );
  $max_long = $venue->{long} if ( $venue->{long} > $max_long );

  # Figure out an appropriate colour of marker.
  my @types;
  if ( ref $venue->{type} ) {
    @types = @{ $venue->{type} };
  } else {
    @types = ( $venue->{type} );
  }

  my @markers = map { $colours{$_}; } @types;
  if ( ! $markers[0] ) {
    die "No appropriate markers for $venue->{name}.\n";
  }
  $venue->{marker} = join( "_", sort @markers );
}

my $tt_config = {
  INCLUDE_PATH => "$datadir/templates/",
  OUTPUT_PATH => "$webdir/",
};
my $tt = Template->new( $tt_config ) or die Template->error;

my $tt_vars = {
  base_url => $base_url,
  min_lat => $min_lat,
  max_lat => $max_lat,
  centre_lat => ( ( $min_lat + $max_lat ) / 2 ),
  min_long => $min_long,
  max_long => $max_long,
  centre_long => ( ( $min_long + $max_long ) / 2 ),
  venues => \@venues,
};

open( my $output_fh, ">", "$webdir/map.html" ) or die $!;
$tt->process( "map.tt", $tt_vars, $output_fh ) or die $tt->error;
close $output_fh;

copy( "$datadir/stylesheets/loncon.css", "$webdir/stylesheets" ) || die $!;
copy( "$datadir/js/map.js", "$webdir/js" ) || die $!;
if ( !$laptop ) {
  edit_file { s'http://127.0.0.1/~kake/loncon/'http://the.earth.li/~kake/tmp/loncon/'g } "$webdir/js/map.js";
}

my @icons = bsd_glob( "$datadir/icons/*.png" );
foreach my $icon ( @icons ) {
  my ( $vol, $dir, $file) = File::Spec->splitpath( $icon );
  copy( "$datadir/icons/$file", "$webdir/icons" ) || die $!;
}
